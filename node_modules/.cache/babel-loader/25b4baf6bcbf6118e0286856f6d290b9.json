{"ast":null,"code":"import _objectSpread from\"/Users/admin/Documents/WEB/React/FlagsOfCountries/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{List}from'../components/List';import{Card}from'../components/Card';import{selectCountriesInfo,selectVisiableCountries}from'../store/contriesSlice/contriesSlice';import{loadAllCountries}from'../store/contriesSlice/contriesSlice';import{selectControls}from'../store/controls/controlsSlice';import{useNavigate}from'react-router-dom';import{useDispatch,useSelector}from'react-redux';import{useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var CountriesList=function CountriesList(){var navigate=useNavigate();var _useSelector=useSelector(selectControls),search=_useSelector.search,region=_useSelector.region;var countries=useSelector(function(state){return selectVisiableCountries(state,{search:search,region:region});});var _useSelector2=useSelector(selectCountriesInfo),status=_useSelector2.status,error=_useSelector2.error,qty=_useSelector2.qty;var dispatch=useDispatch();useEffect(function(){if(!qty){dispatch(loadAllCountries());}},[qty,dispatch]);return/*#__PURE__*/_jsxs(_Fragment,{children:[error&&/*#__PURE__*/_jsx(\"h2\",{children:\"Can't get data\"}),!countries.length&&/*#__PURE__*/_jsx(\"h2\",{style:{textAlign:'center'},children:\" There is no such a country... \"}),status==='received'&&/*#__PURE__*/_jsx(List,{children:countries.map(function(c){var countryInfo={img:c.flags.png,name:c.name,info:[{title:'Population',description:c.population.toLocaleString()},{title:'Region',description:c.region},{title:'Capital',description:c.capital}]};return/*#__PURE__*/_jsx(Card,_objectSpread({onClick:function onClick(){return navigate(\"/country/\".concat(c.name));}},countryInfo),c.name);})})]});};","map":{"version":3,"sources":["/Users/admin/Documents/WEB/React/FlagsOfCountries/src/components/CountriesList.jsx"],"names":["List","Card","selectCountriesInfo","selectVisiableCountries","loadAllCountries","selectControls","useNavigate","useDispatch","useSelector","useEffect","CountriesList","navigate","search","region","countries","state","status","error","qty","dispatch","length","textAlign","map","c","countryInfo","img","flags","png","name","info","title","description","population","toLocaleString","capital"],"mappings":"sIAAA,OAASA,IAAT,KAAqB,oBAArB,CACA,OAASC,IAAT,KAAqB,oBAArB,CACA,OAASC,mBAAT,CAA8BC,uBAA9B,KAA6D,sCAA7D,CACA,OAASC,gBAAT,KAAiC,sCAAjC,CACA,OAASC,cAAT,KAA+B,iCAA/B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,SAAT,KAA0B,OAA1B,C,6IAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAEjC,GAAMC,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CACA,iBAA2BE,WAAW,CAACH,cAAD,CAAtC,CAAQO,MAAR,cAAQA,MAAR,CAAgBC,MAAhB,cAAgBA,MAAhB,CACA,GAAMC,CAAAA,SAAS,CAAGN,WAAW,CAAC,SAAAO,KAAK,QAAIZ,CAAAA,uBAAuB,CAACY,KAAD,CAAQ,CAAEH,MAAM,CAANA,MAAF,CAAUC,MAAM,CAANA,MAAV,CAAR,CAA3B,EAAN,CAA7B,CACA,kBAA+BL,WAAW,CAACN,mBAAD,CAA1C,CAAQc,MAAR,eAAQA,MAAR,CAAgBC,KAAhB,eAAgBA,KAAhB,CAAuBC,GAAvB,eAAuBA,GAAvB,CACA,GAAMC,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CAEAE,SAAS,CAAC,UAAM,CACd,GAAI,CAACS,GAAL,CAAU,CACRC,QAAQ,CAACf,gBAAgB,EAAjB,CAAR,CACD,CACF,CAJQ,CAIN,CAACc,GAAD,CAAMC,QAAN,CAJM,CAAT,CAMA,mBACE,2BACGF,KAAK,eAAI,sCADZ,CAEG,CAACH,SAAS,CAACM,MAAX,eAAqB,WAAI,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAb,CAAX,6CAFxB,CAGGL,MAAM,GAAK,UAAX,eACC,KAAC,IAAD,WACGF,SAAS,CAACQ,GAAV,CAAc,SAACC,CAAD,CAAO,CACpB,GAAMC,CAAAA,WAAW,CAAG,CAClBC,GAAG,CAAEF,CAAC,CAACG,KAAF,CAAQC,GADK,CAElBC,IAAI,CAAEL,CAAC,CAACK,IAFU,CAGlBC,IAAI,CAAE,CACJ,CACEC,KAAK,CAAE,YADT,CAEEC,WAAW,CAAER,CAAC,CAACS,UAAF,CAAaC,cAAb,EAFf,CADI,CAKJ,CACEH,KAAK,CAAE,QADT,CAEEC,WAAW,CAAER,CAAC,CAACV,MAFjB,CALI,CASJ,CACEiB,KAAK,CAAE,SADT,CAEEC,WAAW,CAAER,CAAC,CAACW,OAFjB,CATI,CAHY,CAApB,CAmBA,mBACE,KAAC,IAAD,gBAEE,OAAO,CAAE,yBAAMvB,CAAAA,QAAQ,oBAAaY,CAAC,CAACK,IAAf,EAAd,EAFX,EAGMJ,WAHN,EACOD,CAAC,CAACK,IADT,CADF,CAOD,CA3BA,CADH,EAJJ,GADF,CA0CD,CAxDM","sourcesContent":["import { List } from '../components/List';\nimport { Card } from '../components/Card';\nimport { selectCountriesInfo, selectVisiableCountries } from '../store/contriesSlice/contriesSlice';\nimport { loadAllCountries } from '../store/contriesSlice/contriesSlice';\nimport { selectControls } from '../store/controls/controlsSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nexport const CountriesList = () => {\n\n  const navigate = useNavigate();\n  const { search, region } = useSelector(selectControls);\n  const countries = useSelector(state => selectVisiableCountries(state, { search, region }));\n  const { status, error, qty } = useSelector(selectCountriesInfo)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!qty) {\n      dispatch(loadAllCountries())\n    }\n  }, [qty, dispatch])\n\n  return (\n    <>\n      {error && <h2>Can't get data</h2>}\n      {!countries.length && <h2 style={{ textAlign: 'center' }}> There is no such a country... </h2>}\n      {status === 'received' && (\n        <List>\n          {countries.map((c) => {\n            const countryInfo = {\n              img: c.flags.png,\n              name: c.name,\n              info: [\n                {\n                  title: 'Population',\n                  description: c.population.toLocaleString(),\n                },\n                {\n                  title: 'Region',\n                  description: c.region,\n                },\n                {\n                  title: 'Capital',\n                  description: c.capital,\n                },\n              ],\n            };\n\n            return (\n              <Card\n                key={c.name}\n                onClick={() => navigate(`/country/${c.name}`)}\n                {...countryInfo}\n              />\n            );\n          })}\n        </List>\n\n\n      )}\n    </>\n  )\n\n\n}"]},"metadata":{},"sourceType":"module"}