{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const loadAllCountries = createAsyncThunk('loadCountries', async (_, _ref) => {\n  let {\n    extra: {\n      client,\n      api\n    }\n  } = _ref;\n  return client.get(api.ALL_COUNTRIES);\n});\nconst initialState = {\n  status: 'idle',\n  error: null,\n  list: []\n};\nexport const countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadAllCountries.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loadAllCountries.fulfilled, (state, action) => {\n      state.list = action.payload.data;\n      state.status = 'received';\n    }).addCase(loadAllCountries.rejected, (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload || action.meta.error;\n    });\n  }\n}); //selectores \n\nexport const selectCountriesInfo = state => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n});\nexport const selectAllCountries = state => state.countries.list;\nexport const selectVisiableCountries = (state, _ref2) => {\n  let {\n    search = '',\n    region = ''\n  } = _ref2;\n  return state.countries.list.filter(country => {\n    return country.name.toLowerCase().includes(search.toLowerCase()) && country.region.includes(region);\n  });\n};\nexport const countriesReducer = countriesSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/WEB/React/FlagsOfCountries/src/store/contriesSlice/contriesSlice.js"],"names":["createAsyncThunk","createSlice","loadAllCountries","_","extra","client","api","get","ALL_COUNTRIES","initialState","status","error","list","countriesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","data","rejected","meta","selectCountriesInfo","countries","qty","length","selectAllCountries","selectVisiableCountries","search","region","filter","country","toLowerCase","includes","countriesReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAAC,eAAD,EAC5C,OAAQG,CAAR;AAAA,MAAU;AAACC,IAAAA,KAAK,EAAC;AAACC,MAAAA,MAAD;AAAQC,MAAAA;AAAR;AAAP,GAAV;AAAA,SAAoCD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,aAAf,CAApC;AAAA,CAD4C,CAAzC;AAMP,MAAMC,YAAY,GAAC;AACfC,EAAAA,MAAM,EAAE,MADO;AAEfC,EAAAA,KAAK,EAAC,IAFS;AAGfC,EAAAA,IAAI,EAAC;AAHU,CAAnB;AAMA,OAAO,MAAMC,cAAc,GAAGZ,WAAW,CAAC;AACtCa,EAAAA,IAAI,EAAC,WADiC;AAEtCL,EAAAA,YAFsC;AAGtCM,EAAAA,QAAQ,EAAC,EAH6B;AAIvCC,EAAAA,aAAa,EAAEC,OAAD,IAAW;AACxBA,IAAAA,OAAO,CACNC,OADD,CACShB,gBAAgB,CAACiB,OAD1B,EACoCC,KAAD,IAAS;AACxCA,MAAAA,KAAK,CAACV,MAAN,GAAe,SAAf;AACAU,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACH,KAJD,EAKCO,OALD,CAKShB,gBAAgB,CAACmB,SAL1B,EAKqC,CAACD,KAAD,EAAQE,MAAR,KAAiB;AAClDF,MAAAA,KAAK,CAACR,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeC,IAA5B;AACAJ,MAAAA,KAAK,CAACV,MAAN,GAAe,UAAf;AACH,KARD,EASCQ,OATD,CASShB,gBAAgB,CAACuB,QAT1B,EASoC,CAACL,KAAD,EAAQE,MAAR,KAAiB;AACjDF,MAAAA,KAAK,CAACV,MAAN,GAAa,UAAb;AACAU,MAAAA,KAAK,CAACT,KAAN,GAAYW,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACI,IAAP,CAAYf,KAAxC;AACH,KAZD;AAaA;AAlBsC,CAAD,CAAlC,C,CAqBP;;AAEA,OAAO,MAAMgB,mBAAmB,GAAEP,KAAD,KAAU;AACvCV,EAAAA,MAAM,EAACU,KAAK,CAACQ,SAAN,CAAgBlB,MADgB;AAEvCC,EAAAA,KAAK,EAACS,KAAK,CAACQ,SAAN,CAAgBjB,KAFiB;AAGvCkB,EAAAA,GAAG,EAACT,KAAK,CAACQ,SAAN,CAAgBhB,IAAhB,CAAqBkB;AAHc,CAAV,CAA1B;AAMP,OAAO,MAAMC,kBAAkB,GAAEX,KAAD,IAASA,KAAK,CAACQ,SAAN,CAAgBhB,IAAlD;AAEP,OAAO,MAAMoB,uBAAuB,GAAC,CAACZ,KAAD,YAAgC;AAAA,MAAzB;AAACa,IAAAA,MAAM,GAAC,EAAR;AAAYC,IAAAA,MAAM,GAAC;AAAnB,GAAyB;AACrE,SAAOd,KAAK,CAACQ,SAAN,CAAgBhB,IAAhB,CAAqBuB,MAArB,CAA4BC,OAAO,IAAI;AACtC,WAAQA,OAAO,CAACtB,IAAR,CAAauB,WAAb,GAA2BC,QAA3B,CAAoCL,MAAM,CAACI,WAAP,EAApC,KAA2DD,OAAO,CAACF,MAAR,CAAeI,QAAf,CAAwBJ,MAAxB,CAAnE;AACC,GAFF,CAAP;AAIC,CALM;AAQP,OAAO,MAAMK,gBAAgB,GAAG1B,cAAc,CAAC2B,OAAxC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\n\nexport const loadAllCountries = createAsyncThunk('loadCountries',\n    async ( _,{extra:{client,api}} ) => client.get(api.ALL_COUNTRIES)\n\n);\n\n\nconst initialState={\n    status: 'idle',\n    error:null,\n    list:[]\n}\n\nexport const countriesSlice = createSlice({\n    name:'countries',\n    initialState,\n    reducers:{ },\n   extraReducers:(builder)=>{\n    builder\n    .addCase(loadAllCountries.pending, (state)=>{\n        state.status = 'loading';\n        state.error = null;\n    })\n    .addCase(loadAllCountries.fulfilled, (state, action)=>{\n        state.list = action.payload.data;\n        state.status = 'received';\n    })\n    .addCase(loadAllCountries.rejected, (state, action)=>{\n        state.status='rejected';\n        state.error=action.payload||action.meta.error; \n    })\n   }\n}) \n\n//selectores \n\nexport const selectCountriesInfo=(state)=>({\n    status:state.countries.status,\n    error:state.countries.error,\n    qty:state.countries.list.length,\n})\n\nexport const selectAllCountries=(state)=>state.countries.list;\n \nexport const selectVisiableCountries=(state,{search='', region=''})=>{\nreturn state.countries.list.filter(country => {\n        return  country.name.toLowerCase().includes(search.toLowerCase())&&country.region.includes(region)\n        }\n    )\n}\n\n\nexport const countriesReducer = countriesSlice.reducer;"]},"metadata":{},"sourceType":"module"}