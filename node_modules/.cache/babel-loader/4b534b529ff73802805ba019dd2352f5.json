{"ast":null,"code":"import _asyncToGenerator from\"/Users/admin/Documents/WEB/React/The_World/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/admin/Documents/WEB/React/The_World/node_modules/@babel/runtime/regenerator/index.js\";import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";export var loadAllCountries=createAsyncThunk('loadCountries',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_,_ref){var _ref$extra,client,api;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$extra=_ref.extra,client=_ref$extra.client,api=_ref$extra.api;return _context.abrupt(\"return\",client.get(api.ALL_COUNTRIES));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());var initialState={status:'idle',error:null,list:[]};export var countriesSlice=createSlice({name:'countries',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(loadAllCountries.pending,function(state){state.status='loading';state.error=null;}).addCase(loadAllCountries.fulfilled,function(state,action){state.list=action.payload.data;state.status='received';}).addCase(loadAllCountries.rejected,function(state,action){state.status='rejected';state.error=action.payload||action.meta.error;});}});//selectores \nexport var selectCountriesInfo=function selectCountriesInfo(state){return{status:state.countries.status,error:state.countries.error,qty:state.countries.list.length};};export var selectAllCountries=function selectAllCountries(state){return state.countries.list;};export var selectVisiableCountries=function selectVisiableCountries(state,_ref3){var _ref3$search=_ref3.search,search=_ref3$search===void 0?'':_ref3$search,_ref3$region=_ref3.region,region=_ref3$region===void 0?'':_ref3$region;return state.countries.list.filter(function(country){return country.name.toLowerCase().includes(search.toLowerCase())&&country.region.includes(region);});};export var countriesReducer=countriesSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/WEB/React/The_World/src/store/contriesSlice/contriesSlice.js"],"names":["createAsyncThunk","createSlice","loadAllCountries","_","extra","client","api","get","ALL_COUNTRIES","initialState","status","error","list","countriesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","data","rejected","meta","selectCountriesInfo","countries","qty","length","selectAllCountries","selectVisiableCountries","search","region","filter","country","toLowerCase","includes","countriesReducer","reducer"],"mappings":"mQAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAGF,gBAAgB,CAAC,eAAD,2FAC5C,iBAAQG,CAAR,iKAAWC,KAAX,CAAkBC,MAAlB,YAAkBA,MAAlB,CAAyBC,GAAzB,YAAyBA,GAAzB,iCAAoCD,MAAM,CAACE,GAAP,CAAWD,GAAG,CAACE,aAAf,CAApC,wDAD4C,oEAAzC,CAMP,GAAMC,CAAAA,YAAY,CAAC,CACfC,MAAM,CAAE,MADO,CAEfC,KAAK,CAAC,IAFS,CAGfC,IAAI,CAAC,EAHU,CAAnB,CAMA,MAAO,IAAMC,CAAAA,cAAc,CAAGZ,WAAW,CAAC,CACtCa,IAAI,CAAC,WADiC,CAEtCL,YAAY,CAAZA,YAFsC,CAGtCM,QAAQ,CAAC,EAH6B,CAIvCC,aAAa,CAAC,uBAACC,OAAD,CAAW,CACxBA,OAAO,CACNC,OADD,CACShB,gBAAgB,CAACiB,OAD1B,CACmC,SAACC,KAAD,CAAS,CACxCA,KAAK,CAACV,MAAN,CAAe,SAAf,CACAU,KAAK,CAACT,KAAN,CAAc,IAAd,CACH,CAJD,EAKCO,OALD,CAKShB,gBAAgB,CAACmB,SAL1B,CAKqC,SAACD,KAAD,CAAQE,MAAR,CAAiB,CAClDF,KAAK,CAACR,IAAN,CAAaU,MAAM,CAACC,OAAP,CAAeC,IAA5B,CACAJ,KAAK,CAACV,MAAN,CAAe,UAAf,CACH,CARD,EASCQ,OATD,CASShB,gBAAgB,CAACuB,QAT1B,CASoC,SAACL,KAAD,CAAQE,MAAR,CAAiB,CACjDF,KAAK,CAACV,MAAN,CAAa,UAAb,CACAU,KAAK,CAACT,KAAN,CAAYW,MAAM,CAACC,OAAP,EAAgBD,MAAM,CAACI,IAAP,CAAYf,KAAxC,CACH,CAZD,EAaA,CAlBsC,CAAD,CAAlC,CAqBP;AAEA,MAAO,IAAMgB,CAAAA,mBAAmB,CAAC,QAApBA,CAAAA,mBAAoB,CAACP,KAAD,QAAU,CACvCV,MAAM,CAACU,KAAK,CAACQ,SAAN,CAAgBlB,MADgB,CAEvCC,KAAK,CAACS,KAAK,CAACQ,SAAN,CAAgBjB,KAFiB,CAGvCkB,GAAG,CAACT,KAAK,CAACQ,SAAN,CAAgBhB,IAAhB,CAAqBkB,MAHc,CAAV,EAA1B,CAMP,MAAO,IAAMC,CAAAA,kBAAkB,CAAC,QAAnBA,CAAAA,kBAAmB,CAACX,KAAD,QAASA,CAAAA,KAAK,CAACQ,SAAN,CAAgBhB,IAAzB,EAAzB,CAEP,MAAO,IAAMoB,CAAAA,uBAAuB,CAAC,QAAxBA,CAAAA,uBAAwB,CAACZ,KAAD,OAAgC,wBAAxBa,MAAwB,CAAxBA,MAAwB,uBAAjB,EAAiB,iCAAbC,MAAa,CAAbA,MAAa,uBAAN,EAAM,cACrE,MAAOd,CAAAA,KAAK,CAACQ,SAAN,CAAgBhB,IAAhB,CAAqBuB,MAArB,CAA4B,SAAAC,OAAO,CAAI,CACtC,MAAQA,CAAAA,OAAO,CAACtB,IAAR,CAAauB,WAAb,GAA2BC,QAA3B,CAAoCL,MAAM,CAACI,WAAP,EAApC,GAA2DD,OAAO,CAACF,MAAR,CAAeI,QAAf,CAAwBJ,MAAxB,CAAnE,CACC,CAFF,CAAP,CAIC,CALM,CAQP,MAAO,IAAMK,CAAAA,gBAAgB,CAAG1B,cAAc,CAAC2B,OAAxC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\n\nexport const loadAllCountries = createAsyncThunk('loadCountries',\n    async ( _,{extra:{client,api}} ) => client.get(api.ALL_COUNTRIES)\n\n);\n\n\nconst initialState={\n    status: 'idle',\n    error:null,\n    list:[]\n}\n\nexport const countriesSlice = createSlice({\n    name:'countries',\n    initialState,\n    reducers:{ },\n   extraReducers:(builder)=>{\n    builder\n    .addCase(loadAllCountries.pending, (state)=>{\n        state.status = 'loading';\n        state.error = null;\n    })\n    .addCase(loadAllCountries.fulfilled, (state, action)=>{\n        state.list = action.payload.data;\n        state.status = 'received';\n    })\n    .addCase(loadAllCountries.rejected, (state, action)=>{\n        state.status='rejected';\n        state.error=action.payload||action.meta.error; \n    })\n   }\n}) \n\n//selectores \n\nexport const selectCountriesInfo=(state)=>({\n    status:state.countries.status,\n    error:state.countries.error,\n    qty:state.countries.list.length,\n})\n\nexport const selectAllCountries=(state)=>state.countries.list;\n \nexport const selectVisiableCountries=(state,{search='', region=''})=>{\nreturn state.countries.list.filter(country => {\n        return  country.name.toLowerCase().includes(search.toLowerCase())&&country.region.includes(region)\n        }\n    )\n}\n\n\nexport const countriesReducer = countriesSlice.reducer;"]},"metadata":{},"sourceType":"module"}